
class TetrisGame{

    field int score;
    field Array tetrisState;
    field int randomNumberMod7;
    field Tetromino currentPiece;
    static Array twoToThe;
    field boolean ending;

    constructor TetrisGame new(){
        var int i, powerOfTwo;
        let i = 0;
        let powerOfTwo = 1;
        let twoToThe = Array.new(10);
        while(i < 15){
            let twoToThe[i] = powerOfTwo;
            let powerOfTwo = powerOfTwo + powerOfTwo;
            let i = i + 1;
        }

        let score = 0;
        let randomNumberMod7 = 0;
        do Grid.init();

        do Output.moveCursor(9, 1);
        do Output.printString("Nand2tetris!");
        do Output.moveCursor(12, 3);
        do Output.printString("Score:");
        do updateScore();

        let tetrisState = Array.new(15);
        return this;
    }

    method void dispose(){
        do Memory.deAlloc(this);
        return;
    }

    method void updateScore(){
        do Output.moveCursor(12, 10);
        do Output.printInt(score);
        return;
    }

    method void updateRandomNumber(){
        if(randomNumberMod7 = 6){
            let randomNumberMod7 = 0;
        } else{
            let randomNumberMod7 = randomNumberMod7 + 1;
        }
        return;
    }

    method void run(){      // 10X15 Grid
        var boolean keyIsPressed;
        var int key, time, i;

        let currentPiece = Tetromino.new(randomNumberMod7);
        do updatePiece(false);

        let ending = false;
        let time = 800;
        while(~ending){
            let i = 0;
            while((i < time) & (~ending)){
                let key = Keyboard.keyPressed();
                if(~keyIsPressed){
                    if(key = 80){    // pause
                        do Output.moveCursor(15, 5);
                        do Output.printString("PAUSED");
                        while(~(key = 0)){ let key = Keyboard.keyPressed(); }
                        while(~(key = 80)){ let key = Keyboard.keyPressed(); }
                        while(~(key = 0)){let key = Keyboard.keyPressed(); }
                        do Output.backSpace(); do Output.backSpace();
                        do Output.backSpace(); do Output.backSpace();
                        do Output.backSpace(); do Output.backSpace();
                    }
                    if(key = 81){ let ending = true; }  // quit
                    if(key = 131){ do rotate(); }       // up arrow
                    if(key = 133){ do moveDown(); }     // down arrow
                    if(key = 130){ do moveLeft(); }     // left arrow
                    if(key = 132){ do moveRight(); }     // right arrow
                }
                let keyIsPressed = ~(key = 0);
                do Sys.wait(1);
                do updateRandomNumber();
                let i = i + 1;
            }
            do takeStep();
        }
        return;
    }

    method void takeStep(){
        let score = score + 1;
        do updateScore();
        do moveDown();
        return;
    }

    method void moveDown(){
        if(isValid(currentPiece.calculateMove(0, true))){
            do updatePiece(true);
            do currentPiece.syncPositions();
            do updatePiece(false);
        } else{
            do updateTetrisState();
            if(gameOver()){
                do Output.moveCursor(15, 5);
                do Output.printString("Game Over!");
                let ending = true;
            }
            do currentPiece.dispose();
            let currentPiece = Tetromino.new(randomNumberMod7);
            do updatePiece(false);
        }
        return;
    }

    method void updatePiece(boolean clear){
        var int i;
        var Array positions, block;

        let positions = currentPiece.getPositions();
        let i = 0;
        while(i < 4){
            let block = positions[i];
            if(clear){
                do Grid.drawBlock(block[0], block[1], 0);
            } else{
                do Grid.drawBlock(block[0], block[1], currentPiece.getType() + 1);
            }
            let i = i + 1;
        }
        return;
    }

    method void rotate(){
        if(isValid(currentPiece.calculateRotate())){
            do updatePiece(true);
            do currentPiece.syncPositions();
            do updatePiece(false);
        }
        return;
    }
    
    method void moveLeft(){
        if(isValid(currentPiece.calculateMove(-1, false))){
            do updatePiece(true);
            do currentPiece.syncPositions();
            do updatePiece(false);
        }
        return;
    }
    
    method void moveRight(){
        if(isValid(currentPiece.calculateMove(1, false))){
            do updatePiece(true);
            do currentPiece.syncPositions();
            do updatePiece(false);
        }
        return;
    }

    method boolean isValid(Array positions){
        var Array block;
        var int i;

        let i = 0;
        while(i < 4){
            let block = positions[i];
            if((block[0] < 0) | (block[0] > 14) | (block[1] < 0) | (block[1] > 9)){
                return false;
            }
            if((tetrisState[block[0]] & twoToThe[block[1]]) > 0){
                return false;
            }
            let i = i + 1;
        }
        return true;
    }

    method void updateTetrisState(){
        var Array block, positions;
        var int i;

        let positions = currentPiece.getPositions();
        let i = 0;
        while(i < 4){
            let block = positions[i];
            let tetrisState[block[0]] = tetrisState[block[0]] | twoToThe[block[1]];
            let i = i + 1;
        }
        let i = 0;
        while(i < 15){
            let i = i + 1;
        }
        do runLineClear();
        return;
    }

    method boolean gameOver(){
        if(tetrisState[0] > 0){
            return true;
        }
        return false;
    }

    method void runLineClear(){
        var int i, row, bonus;
        var boolean clear;

        let clear = false;
        let bonus = 0;
        let row = 0;
        while(row < 15){
            if(tetrisState[row] = 1023){
                let bonus = (bonus * 2) + 100;
                let clear = true;
            }
            let row = row + 1;
        }
        if(~clear){
            return;
        }

        let i = 0;
        while(i < 4){
            let row = 0;
            while(row < 15){
                if(tetrisState[row] = 1023){
                    do invertLine(row);
                }
                let row = row + 1;
            }
            let i = i + 1;
            do Sys.wait(300);
        }

        let row = 14;
        while(row > -1){
            if(tetrisState[row] = 1023){
                do collapse(row);
                let row = row + 1;
            }
            let row = row - 1;
        }

        let score = score + bonus;
        do updateScore();
        
        return;
    }

    // collapses both the actual grid and the tetrisState
    method void collapse(int deletedRow){
        var int row, column;
        
        let row = deletedRow - 1;
        while(row > -1){
            let column = 0;
            while(column < 10){
                do Grid.moveDown1(row, column);
                let column = column + 1;
            }
            let tetrisState[row + 1] = tetrisState[row];
            let row = row - 1;
        }
        let tetrisState[0] = 0;
        return;
    }

    method void invertLine(int row){
        var int column;

        let column = 0;
        while(column < 10){
            do Grid.invertBlock(row, column);
            let column = column + 1;
        }
        return;
    }


}