// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static int screen;
    static boolean white;
    static boolean black;
    static boolean color;
    static int ramColor;

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let white = false;
        let black = true;
        do Screen.setColor(black);
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while(i < 8192){
            let screen[i] = white;
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        if(b = black){
            let ramColor = -1;
        } else{
            let ramColor = 0;
        }
        return;
    }

    function boolean getColor(){
        return color;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, mask;
        let address = (32 * y) + (x / 16);
        let mask = Math.twoToThe(x & 15);
        if(color){
            let screen[address] = screen[address] | mask;
        } else{
            let screen[address] = screen[address] & (~mask);
        }
        return;
    }

    function int sign(int num){
        if(num < 0){
            return -1;
        } else{
            return 1;
        }
    }

    function void drawHorizontal(int initialX, int finalX, int y){
        var int x1Mod16, x2Mod16, xFastStart, xFastEnd, ramFastStart, ramFastEnd;
        let x1Mod16 = initialX & 15;
        let x2Mod16 = finalX & 15;
        let xFastStart = initialX + 16 - x1Mod16;
        let xFastEnd = finalX - x2Mod16;
        let ramFastStart = (32 * y) + 1 + (initialX / 16);
        let ramFastEnd = (32 * y) + (finalX / 16);

        if(xFastStart < xFastEnd){
            do Screen.drawHorizontalSlow(initialX, xFastStart, y);
            do Screen.drawHorizontalSlow(xFastEnd, finalX, y);
            while(ramFastStart < ramFastEnd){
                let screen[ramFastStart] = ramColor;
                let ramFastStart = ramFastStart + 1;
            }
        } else{
            do Screen.drawHorizontalSlow(initialX, finalX, y);
        }
        return;
    }

    function void drawHorizontalSlow(int initialX, int finalX, int y){
        var int incX;
        let incX = initialX;
        while(~(incX > finalX)){
            do Screen.drawPixel(incX, y);
            let incX = incX + 1;
        }
        return;
    }

    function void drawVertical(int x, int initialY, int finalY){
        var int changingY, yDir;
        let changingY = initialY;
        let yDir = Screen.sign(finalY - initialY);
        while(~(changingY = finalY)){
                do Screen.drawPixel(x, changingY);
                let changingY = changingY + yDir;
            }
            do Screen.drawPixel(x, changingY);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, dx, dy, diff, initialX, finalX, initialY, finalY, yDir;
        if(x1 > x2){
            let initialX = x2;
            let finalX = x1;
            let initialY = y2;
            let finalY = y1;
        } else{
            let initialX = x1;
            let finalX = x2;
            let initialY = y1;
            let finalY = y2;
        }
        let dx = finalX - initialX;
        let dy = finalY - initialY;

        if(dx = 0){
            do Screen.drawVertical(x1, initialY, finalY);
            return;
        }
        if(dy = 0){
            do Screen.drawHorizontal(initialX, finalX, y1);
            return;
        }

        let a = 0;
        let b = 0;
        let diff = 0;
        let yDir = Screen.sign(dy);
        while(((a < dx) | (a = dx)) & ((Math.abs(b) < Math.abs(dy)) | (b = dy))){
            do Screen.drawPixel(initialX + a, initialY + b);
            if(diff < 0){
                let a = a + 1;
                let diff = diff + (dy * yDir);
            } else{
                let b = b + yDir;
                let diff = diff - dx;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int incY;
        let incY = y1;
        while(~(incY > y2)){
            do Screen.drawLine(x1, incY, x2, incY);
            let incY = incY + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, rSquared, halfHorizontal;
        if(r > 181){
            return;
        }
        let dy = -r;
        let rSquared = r * r;
        while(~(dy > r)){
            let halfHorizontal = Math.sqrt(rSquared - (dy * dy));
            do Screen.drawHorizontal(x - halfHorizontal, x + halfHorizontal, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
