// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int i, powerOfTwo;
        let i = 0;
        let powerOfTwo = 1;

        let twoToThe = Array.new(16);
        while(i < 16){
            let twoToThe[i] = powerOfTwo;
            let powerOfTwo = powerOfTwo + powerOfTwo;
            let i = i + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x < 0){
            return -x;
        }
        return x;
    }

    function int twoToThe(int power){
        return twoToThe[power];
    }

    function boolean bit(int x, int i){
        return (x & twoToThe[i]) > 0;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i, ay;
        let sum = 0;
        let shiftedX = x;
        let ay = Math.abs(y);

        let i = 0;
        while(i < 16){
            if(Math.bit(ay, i)){
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        if(y < 0){
            return (-sum);
        }
        return sum;

    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int quotient, doubleQuotient, ax, ay, sign;
        let ax = Math.abs(x);
        let ay = Math.abs(y);
        if(ax < ay){
            return 0;
        }

        if(((x > 0) & (y > 0)) | ((x < 0) & (y < 0))){
            let sign = 1;
        } else{
            let sign = -1;
        }

        let quotient = Math.divide(ax, ay + ay);
        let doubleQuotient = quotient + quotient;
        if((ax - (doubleQuotient * ay)) < ay){
            return sign * doubleQuotient;
        }
        return sign * (doubleQuotient + 1);
        
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int sqrtX, j, testSum, testSumSquared;
        let sqrtX = 0;
        let j = 7;
        while(j > -1){
            let testSum = sqrtX + twoToThe[j];
            let testSumSquared = testSum * testSum;
            if(((testSumSquared < x) | (testSumSquared = x)) & (testSumSquared > 0)){
                let sqrtX = testSum;
            }
            let j = j - 1;
        }
        return sqrtX;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if(a > b){
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if(a < b){
            return a;
        }
        return b;
    }
}
