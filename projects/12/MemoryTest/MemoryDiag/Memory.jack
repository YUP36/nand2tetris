// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array ram;
    static Array heap;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let heap[0] = -1;
        let heap[1] = 14334;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int segmentBase, currentSegmentSize, totalSize, objBase;
        let segmentBase = 0;
        let totalSize = size + 2;

        while(~(segmentBase = -1)){
            let currentSegmentSize = heap[segmentBase + 1];
            if((currentSegmentSize > totalSize) | (currentSegmentSize = totalSize)){
                let heap[segmentBase + 1] = currentSegmentSize - totalSize;
                let objBase = segmentBase + currentSegmentSize - totalSize + 2;
                let heap[objBase] = objBase;
                let heap[objBase + 1] = size;
                return objBase + heap + 2;
            }
            let segmentBase = heap[segmentBase];
        }
        return -1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int segmentBase;
        let segmentBase = 0;

        while(~(heap[segmentBase] = -1)){
            let segmentBase = heap[segmentBase];
        }
        let heap[segmentBase] = o[-2];
        let o[-2] = -1;
        return;
    }    

    // A forwards deFragger that wouldn't work because 
    // the objects are allocated backwards in the heap.
    function void deFrag() {
        var int segmentBase;
        let segmentBase = 0;

        while(~(heap[segmentBase] = -1)){
            if(heap[segmentBase] = (2 + segmentBase + heap[segmentBase + 1])){
                let heap[segmentBase] = heap[heap[segmentBase]];
                let heap[segmentBase + 1] = heap[segmentBase + 1] + heap[heap[segmentBase] + 1] + 2;
            } else{
                let segmentBase = heap[segmentBase];
            }
        }
        return;
    }
}
