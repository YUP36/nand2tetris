function Screen.init 0
push constant 16384
pop static 0
push constant 0
pop static 1
push constant 0
not
pop static 2
push static 2
call Screen.setColor 1
pop temp 0
push constant 0
return
function Screen.clearScreen 1
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push constant 8192
lt
not
if-goto WHILE_END0
push local 0
push static 0
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.setColor 0
push argument 0
pop static 3
push argument 0
push static 2
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
neg
pop static 4
goto IF_END0
label IF_FALSE0
push constant 0
pop static 4
label IF_END0
push constant 0
return
function Screen.drawPixel 2
push constant 32
push argument 1
call Math.multiply 2
push argument 0
push constant 16
call Math.divide 2
add
pop local 0
push argument 0
push constant 15
and
call Math.twoToThe 1
pop local 1
push static 3
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push static 0
add
push local 0
push static 0
add
pop pointer 1
push that 0
push local 1
or
pop temp 0
pop pointer 1
push temp 0
pop that 0
goto IF_END0
label IF_FALSE0
push local 0
push static 0
add
push local 0
push static 0
add
pop pointer 1
push that 0
push local 1
not
and
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_END0
push constant 0
return
function Screen.sign 0
push argument 0
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
neg
return
goto IF_END0
label IF_FALSE0
push constant 1
return
label IF_END0
function Screen.drawHorizontal 6
push argument 0
push constant 15
and
pop local 0
push argument 1
push constant 15
and
pop local 1
push argument 0
push constant 16
add
push local 0
sub
pop local 2
push argument 1
push local 1
sub
pop local 3
push constant 32
push argument 2
call Math.multiply 2
push constant 1
add
push argument 0
push constant 16
call Math.divide 2
add
pop local 4
push constant 32
push argument 2
call Math.multiply 2
push argument 1
push constant 16
call Math.divide 2
add
pop local 5
push local 2
push local 3
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
push local 2
push argument 2
call Screen.drawHorizontalSlow 3
pop temp 0
push local 3
push argument 1
push argument 2
call Screen.drawHorizontalSlow 3
pop temp 0
label WHILE_EXP0
push local 4
push local 5
lt
not
if-goto WHILE_END0
push local 4
push static 0
add
push static 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 4
push constant 1
add
pop local 4
goto WHILE_EXP0
label WHILE_END0
goto IF_END0
label IF_FALSE0
push argument 0
push argument 1
push argument 2
call Screen.drawHorizontalSlow 3
pop temp 0
label IF_END0
push constant 0
return
function Screen.drawHorizontalSlow 1
push argument 0
pop local 0
label WHILE_EXP0
push local 0
push argument 1
gt
not
not
if-goto WHILE_END0
push local 0
push argument 2
call Screen.drawPixel 2
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawVertical 2
push argument 1
pop local 0
push argument 2
push argument 1
sub
call Screen.sign 1
pop local 1
label WHILE_EXP0
push local 0
push argument 2
eq
not
not
if-goto WHILE_END0
push argument 0
push local 0
call Screen.drawPixel 2
pop temp 0
push local 0
push local 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push argument 0
push local 0
call Screen.drawPixel 2
pop temp 0
push constant 0
return
function Screen.drawLine 10
push argument 0
push argument 2
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 2
pop local 5
push argument 0
pop local 6
push argument 3
pop local 7
push argument 1
pop local 8
goto IF_END0
label IF_FALSE0
push argument 0
pop local 5
push argument 2
pop local 6
push argument 1
pop local 7
push argument 3
pop local 8
label IF_END0
push local 6
push local 5
sub
pop local 2
push local 8
push local 7
sub
pop local 3
push local 2
push constant 0
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 0
push local 7
push local 8
call Screen.drawVertical 3
pop temp 0
push constant 0
return
label IF_FALSE1
push local 3
push constant 0
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 5
push local 6
push argument 1
call Screen.drawHorizontal 3
pop temp 0
push constant 0
return
label IF_FALSE2
push constant 0
pop local 0
push constant 0
pop local 1
push constant 0
pop local 4
push local 3
call Screen.sign 1
pop local 9
label WHILE_EXP0
push local 0
push local 2
lt
push local 0
push local 2
eq
or
push local 1
call Math.abs 1
push local 3
call Math.abs 1
lt
push local 1
push local 3
eq
or
and
not
if-goto WHILE_END0
push local 5
push local 0
add
push local 7
push local 1
add
call Screen.drawPixel 2
pop temp 0
push local 4
push constant 0
lt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push local 0
push constant 1
add
pop local 0
push local 4
push local 3
push local 9
call Math.multiply 2
add
pop local 4
goto IF_END3
label IF_FALSE3
push local 1
push local 9
add
pop local 1
push local 4
push local 2
sub
pop local 4
label IF_END3
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawRectangle 1
push argument 1
pop local 0
label WHILE_EXP0
push local 0
push argument 3
gt
not
not
if-goto WHILE_END0
push argument 0
push local 0
push argument 2
push local 0
call Screen.drawLine 4
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawCircle 3
push argument 2
push constant 181
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push argument 2
neg
pop local 0
push argument 2
push argument 2
call Math.multiply 2
pop local 1
label WHILE_EXP0
push local 0
push argument 2
gt
not
not
if-goto WHILE_END0
push local 1
push local 0
push local 0
call Math.multiply 2
sub
call Math.sqrt 1
pop local 2
push argument 0
push local 2
sub
push argument 0
push local 2
add
push argument 1
push local 0
add
call Screen.drawHorizontal 3
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
